apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: clair-in-ci-db-build-and-trigger
  annotations:
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: |
            event == "push" || event == "pull_request"
    pipelinesascode.tekton.dev/task: "[buildah, git-clone]"
spec:
  timeouts:
    pipeline: "2h"
  params:
    - name: output-image
      value: quay.io/redhat-appstudio/clair-in-ci:to_test
    - name: builder-image
      value: registry.access.redhat.com/ubi9/buildah:9.0.0-19@sha256:c8b1d312815452964885680fc5bc8d99b3bfe9b6961228c71a09c72ca8e915eb
    - name: dockerfile
      value: Dockerfile
    - name: revision
      value: "{{ revision }}"
    - name: repo_url
      value: "{{ repo_url }}"
    - name: event_type
      value: "{{ event_type }}"
    - name: registry-url
      value: "quay.io/redhat-appstudio"
    - name: registry-username
      value: "{{ registry_username }}"
    - name: registry-password
      value: "{{ registry_password }}"
    - name: image-name
      value: "clair-in-ci"
    - name: latest-tag
      value: "latest"
    - name: major-version-tag
      value: "v1"
  workspaces:
    - name: workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
  pipelineSpec:
    params:
      - name: output-image
      - name: builder-image
      - name: dockerfile
      - name: revision
      - name: repo_url
      - name: event_type
      - name: registry-url
      - name: registry-username
      - name: registry-password
      - name: image-name
      - name: latest-tag
      - name: major-version-tag
    workspaces:
      - name: workspace
    tasks:
      - name: fetch-repo
        workspaces:
          - name: output
            workspace: workspace
        computeResources:
          requests:
            cpu: 100mi
        taskRef:
          name: git-clone
        params:
          - name: url
            value: "$(params.repo_url)"
          - name: revision
            value: "$(params.revision)"
      - name: calculate-tag
        params:
          - name: revision
            value: "$(params.revision)"
          - name: event_type
            value: "$(params.event_type)"
        runAfter:
          - fetch-repo
        taskSpec:
          params:
            - name: revision
              type: string
            - name: event_type
              type: string
          results:
            - name: image_tag
              description: Image tag to be used by build
          steps:
            - name: make-tag
              image: registry.access.redhat.com/ubi9
              script: |
                #!/usr/bin/env bash
                VERSION_MAJOR=v1
                # make sure you use `echo -n` otherwise random failures are waiting for you
                if [ "$(params.event_type)" == "push" ]; then
                  echo -n "${VERSION_MAJOR}.$(date --utc '+%Y%m%d%H%M%S')" | tee $(results.image_tag.path)
                else
                  echo -n "PR-$(params.revision)" | tee $(results.image_tag.path)
                fi
      - name: build-image
        timeout: "0"
        workspaces:
          - name: source
            workspace: workspace
        computeResources:
          requests:
            cpu: 1
        runAfter:
          - calculate-tag
        taskRef:
          name: buildah-1-8-0
          kind: ClusterTask
        params:
          - name: IMAGE
            value: "quay.io/redhat-appstudio/clair-in-ci:$(tasks.calculate-tag.results.image_tag)"
          - name: BUILDER_IMAGE
            value: $(params.builder-image)
          - name: DOCKERFILE
            value: $(workspaces.source.path)/$(params.dockerfile)
      - name: test-clair
        runAfter:
          - build-image
        taskSpec:
          steps:
            - name: test-clair-version
              image: quay.io/redhat-appstudio/clair-in-ci:$(tasks.calculate-tag.results.image_tag)
              script: |
                #!/usr/bin/env bash
                echo "See current version of Clair below:"
                clair-action --version
            - name: get-clair-output
              image: quay.io/redhat-appstudio/clair-in-ci:$(tasks.calculate-tag.results.image_tag)
              script: |
                #!/usr/bin/env bash
                echo "Test real life usage of Clair"
                clair-action report --image-ref=registry.access.redhat.com/ubi9-minimal --db-path=/tmp/matcher.db --format=quay | tee /tekton/home/clairdata.json
                echo "Clair report saved to /tekton/home/clairdata.json"
            - name: check-clair-output
              image: quay.io/konflux-ci/konflux-test:latest
              script: |
                #!/usr/bin/env bash
                echo "Check if the output is as expected"
                jq -e '.data[].Features[0] | select(has("Name") and has("Vulnerabilities")) or error("Required keys do not exist")' /tekton/home/clairdata.json            
      - name: login-and-push
        runAfter:
          - test-clair
        when:
        - input: "$(params.event_type)"
          operator: in
          values: ["push"]
        taskSpec:
          steps:
            - name: login-and-push
              image: quay.io/konflux-ci/konflux-test:latest
              script: |
                #!/usr/bin/env bash
                  skopeo copy --all docker://$(params.registry-url)/clair-in-ci:$(tasks.calculate-tag.results.image_tag) docker://$(params.registry-url)/clair-in-ci:$(params.latest-tag)
                  skopeo copy --all docker://$(params.registry-url)/clair-in-ci:$(tasks.calculate-tag.results.image_tag) docker://$(params.registry-url)/clair-in-ci:$(params.major-version-tag)
  workspaces:
    - name: workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
